pipeline {
    agent {
        kubernetes {
            yaml """\
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                some-label: some-label-value
            spec:
              containers:
              - name: maven
                image: maven:3.8.4-eclipse-temurin-11-alpine
                command:
                - cat
                tty: true
              - name: docker
                image: docker:20.10.6-dind
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              volumes:
                - name: docker-sock
                  hostPath:
                    path: /var/run/docker.sock
            """.stripIndent()
        }
    }

    environment {
        // for docker build
        ARTY_CREDS=credentials('jenkins_rt')
        
        // for RT plugin : should match the ID just above
        ARTY_CREDS_ID='jenkins_rt'
        
        ART_ID="artifactory-eu"
        MY_BUILD_NAME='jenkins-java'
        DOCKER_BUILD_NAME='jenkins-java-docker'
        DOCKER_REGISTRY_URL=sh(returnStdout: true, script: """ if [ \"${params.DOCKER_SUB_DOMAIN}\" = \"true\" ]; then echo \"${params.DOCKER_REPO}.${params.JPD_URL}\"; else echo \"${params.JPD_URL}/${params.DOCKER_REPO}\"; fi""").trim()
        
        //JAVA_HOME = '/usr/lib/jvm/java-1.8-openjdk/'
        MAVEN_HOME = '/usr/share/maven'
    }

    parameters {
        string(name: 'MY_GIT_URL', defaultValue: 'https://github.com/cyan21/java-demo', description: 'DO NOT ADD .git at the end')
        string(name: 'MY_GIT_BRANCH', defaultValue: 'main', description: '')

        string(name: 'APP_NAME', defaultValue: 'lion', description: 'will be added as metadata on built artifacts as app.name')
        string(name: 'NEW_VERSION', defaultValue: '2.5.0', description: 'will be added as metadata on built artifacts as app.name')
        string(name: 'NEW_MSG', defaultValue: 'Welcome to Swampup 2021', description: '')

        string(name: 'JPD_URL', defaultValue: 'yann-sbx.dev.gcp.devopsacc.team', description: 'DO NOT ADD PROTOCOL')

        string(name: 'MVN_REPO', defaultValue: 'urs-mvn', description: '')
        string(name: 'MVN_PROMOTE', defaultValue: 'urs-mvn-prod-local', description: '')

        string(name: 'DOCKER_REPO', defaultValue: 'urs-docker', description: '')
        string(name: 'DOCKER_PROMOTE', defaultValue: 'urs-docker-release-local', description: '')
        booleanParam(name: 'DOCKER_SUB_DOMAIN', defaultValue: false, description: 'false means Docker Repo Path')

        booleanParam(name: 'MVN_BUILD', defaultValue: true, description: '')
        booleanParam(name: 'DOCKER_BUILD', defaultValue: false, description: '')

        booleanParam(name: 'FAIL_BUILD', defaultValue: false, description: 'based on Xray scanning result')

        booleanParam(name: 'INDEX_BUILD', defaultValue: false, description: 'Should be used ONLY for the 1st run for XRAY to index a build ')


        string(name: 'ADM_USER', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')
        string(name: 'ADM_PASS', defaultValue: '', description: 'Only used if INDEX_BUILD is ticked')

        booleanParam(name: 'JPIPE_TRIGGER', defaultValue: false, description: '')
        string(name: 'JPIPE_URL', defaultValue: '', description: '')
        string(name: 'JPIPE_PASS', defaultValue: '***', description: '')

        string(name: 'MY_BUILD_NUMBER', defaultValue: '0', description: 'Only used if JPIPE_TRIGGER is ticked. If set to 0 will take the current run ID')
    }
    
    stages {

        stage ('Maven Build') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                container('maven') {
                    
                    sh """#!/bin/sh
                        apk add git curl openjdk11 jq
                        git clone ${params.MY_GIT_URL} -b ${params.MY_GIT_BRANCH}
                    """

                    dir ("src") {

                        sh """
                            mvn --version

                            ls -l 
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|g" "pom.xml"
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|g" "application/pom.xml"
                            sed -i "s|<version>2.0.0</version>|<version>${params.NEW_VERSION}</version>|g" "library/pom.xml"
                            
                            echo "service.message=${params.NEW_MSG}" > application/src/main/resources/application.properties 
                            cat application/src/main/resources/application.properties 
                        """
                        
                        rtServer (
                            id: env.ART_ID,
                            url: "https://${params.JPD_URL}/artifactory",
                            credentialsId: env.ARTY_CREDS_ID
                        )
        
                        rtMavenDeployer (
                            id: "MAVEN_DEPLOYER",
                            serverId: env.ART_ID,
                            properties: ["app.name=${params.APP_NAME}","app.version=${params.NEW_VERSION}"],
                            releaseRepo: params.MVN_REPO,
                            snapshotRepo: params.MVN_REPO
                        )
        
                        rtMavenResolver (
                            id: "MAVEN_RESOLVER",
                            serverId: env.ART_ID,
                            releaseRepo: params.MVN_REPO,
                            snapshotRepo: params.MVN_REPO
                        )
                        
                        rtBuildInfo (
                            captureEnv: true,
                            excludeEnvPatterns: ['DOCKER_BUILD_NAME'],
         
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER,
    			    maxBuilds: 1,
                            // doNotDiscardBuilds: ['4'],
            			    // deleteBuildArtifacts: true
                        )

                        // audit dependencies
                        sh """
			    export MAVEN_OPTS="-Dorg.slf4j.simpleLogger.log.org.apache.maven.cl‌​i.transfer.Slf4jMave‌​nTransferListener=wa‌rn"
                            curl -fL https://getcli.jfrog.io/v2-jf | sh
                            ./jf --version
                            JFROG_CLI_LEVEL=ERROR CI=true ./jf c add  \
                                --url=https://${params.JPD_URL} \
                                --user=${ARTY_CREDS_USR}  \
                                --password="${ARTY_CREDS_PSW}" \
                            yann-rt
                            ./jf mvn-config \
				--server-id-resolve=yann-rt \
				--repo-resolve-releases=${params.MVN_REPO} \
				--repo-resolve-snapshots=${params.MVN_REPO}
                            ./jf audit --mvn
                        """

                        rtMavenRun (
                            pom: "pom.xml",
                            goals: 'clean install -B -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn',
                            deployerId: "MAVEN_DEPLOYER",
                            resolverId: "MAVEN_RESOLVER",
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                      
                        rtPublishBuildInfo (
                            serverId: env.ART_ID,
                            buildName: env.MY_BUILD_NAME,
                            buildNumber: env.BUILD_NUMBER
                        )
                    }
                } // end container
            } // end step
        }   // end stage
        
        stage ('Build promotion') {
            when {
                expression {
                    params.MVN_BUILD
                }
            }
            steps {
                rtPromote (
                    serverId: env.ART_ID,
                    buildName: env.MY_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.MVN_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: true,
                    copy: false,
                    failFast: false
                )               
            }
        }

        stage ('Docker Build & Push') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                container('docker') {

                    rtServer (
                        id: env.ART_ID,
                        url: "https://${params.JPD_URL}/artifactory",
                        credentialsId: env.ARTY_CREDS_ID
                    )

                    rtBuildInfo (
                        captureEnv: true,
                        excludeEnvPatterns: ['*MY_BUILD_NAME*', 'DOCKER_BUILD_NAME'],
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    rtDownload (
                        serverId: env.ART_ID,
                        spec: """{
                              "files": [
                                {
                                  \"pattern": \"${params.MVN_REPO}/**/multi-module-application-${params.NEW_VERSION}.jar\",
                                  \"target": \"multi-module-application.jar\",
                                  \"flat\": \"true\"
                                  
                                }
                              ]
                        }""",
                        failNoOp: true,
                        module: 'webapp',
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
                    
                    sh """#!/bin/sh
                        apk add curl openjdk11 libc6-compat
                        echo ${env.DOCKER_REGISTRY_URL}
                        git_path=`echo ${params.MY_GIT_URL} | cut -d/ -f4,5`
                        echo \${git_path}
                        curl -O https://raw.githubusercontent.com/\${git_path}/${params.MY_GIT_BRANCH}/src/Dockerfile
                        docker login -u ${ARTY_CREDS_USR} -p ${ARTY_CREDS_PSW} ${env.DOCKER_REGISTRY_URL}
                        ls -l 
                        docker build --network=host --build-arg REGISTRY=${params.JPD_URL} -t ${env.DOCKER_REGISTRY_URL}/jenkins-javapp:${params.NEW_VERSION} . 
                    """
                
                    // Audit Docker image
                    sh """
                        
                        curl -fL https://getcli.jfrog.io/v2-jf | sh
                        ./jf --version
                        ./jf c show
                        JFROG_CLI_LEVEL=ERROR CI=true ./jf c add  \
                            --url=https://${params.JPD_URL} \
                            --user=${ARTY_CREDS_USR}  \
                            --password="${ARTY_CREDS_PSW}" \
                        yann-rt
                        JFROG_CLI_LEVEL=DEBUG ./jf docker scan ${env.DOCKER_REGISTRY_URL}/jenkins-javapp:${params.NEW_VERSION}
                    """

                    rtDockerPush(
                        serverId: env.ART_ID,
                        image: "${env.DOCKER_REGISTRY_URL}/jenkins-javapp:${params.NEW_VERSION}",
                        targetRepo: params.DOCKER_REPO,
                        properties: "app.name=${params.APP_NAME};app.version=${params.NEW_VERSION}",
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )
 
                    rtPublishBuildInfo (
                        serverId: env.ART_ID,
                        buildName: env.DOCKER_BUILD_NAME,
                        buildNumber: env.BUILD_NUMBER
                    )

                    sh """
                        if [ ${params.INDEX_BUILD} == "true" ]; then
                            curl \
                                -XPOST \
                                -u "${ADM_USER}:${ADM_PASS}" \
                                -H "Content-Type: application/json" \
                                -d '{"names":["'${env.DOCKER_BUILD_NAME}'"]}' \
                            https://${params.JPD_URL}/xray/api/v1/binMgr/builds
                        else
                            echo "No indexing"
                        fi 
                    """
                }
            } // end steps
        } // end stage

        stage ('Build promotion for Docker Build') {
            when {
                expression {
                    params.DOCKER_BUILD
                }
            }
            steps {
                rtPromote (
                    // Mandatory parameter
                    serverId: env.ART_ID,
                    buildName: env.DOCKER_BUILD_NAME,
                    buildNumber: env.BUILD_NUMBER,

                    targetRepo: params.DOCKER_PROMOTE,
                    comment: 'Xray scan passed',
                    status: 'VULN_SCAN_OK',
                    includeDependencies: false,
                    copy: false,
                    failFast: false
                )               
            }

        }

        stage ('Trigger JFrog Pipelines') {
            when {
                expression {
                    params.JPIPE_TRIGGER
                }
            }
            steps {
                
                sh """#!/bin/sh
                        bNumber=${params.MY_BUILD_NUMBER} 
                        if [ \$bNumber = "0" ]; then bNumber=${env.BUILD_NUMBER}; fi
                        echo \$bNumber
        
                        curl \
                            -XPOST \
                            -H "authorization: ${params.JPIPE_PASS}" \
                            -H "Content-Type: application/json" \
                            -d '{"DockerBuildName": "'${env.DOCKER_BUILD_NAME}'", "buildNumber": "'\${bNumber}'", "appName": "'${params.APP_NAME}'", "appVersion":"'${params.NEW_VERSION}'"}' \
                       "${params.JPIPE_URL}"
                """
            }
        }

    } // end stages
}
